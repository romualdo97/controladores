// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // ======================================================

    // X - zx - nx
    // negate controls for x input
    Not16(in[0]=zx, 
          in[1]=zx, 
          in[2]=zx,
          in[3]=zx,
          in[4]=zx,
          in[5]=zx,
          in[6]=zx,
          in[7]=zx,
          in[8]=zx,
          in[9]=zx,
          in[10]=zx,
          in[11]=zx,
          in[12]=zx,
          in[13]=zx,
          in[14]=zx,
          in[15]=zx, 
          out=NOTzx);
    Not16(in[0]=nx,
          in[1]=nx,
          in[2]=nx,
          in[3]=nx,
          in[4]=nx,
          in[5]=nx,
          in[6]=nx,
          in[7]=nx,
          in[8]=nx,
          in[9]=nx,
          in[10]=nx,
          in[11]=nx,
          in[12]=nx,
          in[13]=nx,
          in[14]=nx,
          in[15]=nx,
          out=NOTnx);
    Not16(in=x, out=NOTx);

    // if zx then make x be zero
    And16(a=x, b=NOTzx, out=zeroedX);

    // if nx then negate x
    And16(a=x, b=NOTnx, out=xANDNnx);
    And16(a=NOTx, 
          b[0]=nx,
          b[1]=nx,
          b[2]=nx,
          b[3]=nx,
          b[4]=nx,
          b[5]=nx,
          b[6]=nx,
          b[7]=nx,
          b[8]=nx,
          b[9]=nx,
          b[10]=nx,
          b[11]=nx,
          b[12]=nx,
          b[13]=nx,
          b[14]=nx,
          b[15]=nx,
          out=NxANDnx);

    Or16(a=xANDNnx, b=NxANDnx, out=negatedX);

    // zeroed or negated x?

    Or16(a=zeroedX, b=negatedX, out=zerORnegX);

    // ======================================================

    // Y - zy - ny
    // negate controls for y input
    Not16(in[0]=zy,
          in[1]=zy,
          in[2]=zy,
          in[3]=zy,
          in[4]=zy,
          in[5]=zy,
          in[6]=zy,
          in[7]=zy,
          in[8]=zy,
          in[9]=zy,
          in[10]=zy,
          in[11]=zy,
          in[12]=zy,
          in[13]=zy,
          in[14]=zy,
          in[15]=zy,
          out=NOTzy);
    Not16(in[0]=ny,
          in[1]=ny,
          in[2]=ny,
          in[3]=ny,
          in[4]=ny,
          in[5]=ny,
          in[6]=ny,
          in[7]=ny,
          in[8]=ny,
          in[9]=ny,
          in[10]=ny,
          in[11]=ny,
          in[12]=ny,
          in[13]=ny,
          in[14]=ny,
          in[15]=ny,
          out=NOTny);
    Not16(in=y, out=NOTy);

    // if zy then make y be zero
    And16(a=y, b=NOTzy, out=zeroedY);

    // if ny then negate y
    And16(a=y, b=NOTny, out=yANDNny);
    And16(a=NOTy,
          b[0]=ny,
          b[1]=ny,
          b[2]=ny,
          b[3]=ny,
          b[4]=ny,
          b[5]=ny,
          b[6]=ny,
          b[7]=ny,
          b[8]=ny,
          b[9]=ny,
          b[10]=ny,
          b[11]=ny,
          b[12]=ny,
          b[13]=ny,
          b[14]=ny,
          b[15]=ny, 
          out=NyANDny);
    
    Or16(a=yANDNny, b=NyANDny, out=negatedY);

    // zeroed or negated y?
    Or16(a=zeroedY, b=negatedY, out=zerORnegY);

    // ======================================================

    // x output AND y output (xo & yo)
    And16(a=zerORnegX, b=zerORnegY, out=xoANDyo);

    // x output PLUS y output (xo + yo)
    Add16(a=zerORnegX, b=zerORnegY, out=xoPLUSyo);

    // if f then x + y else x & y
    Mux16(a=xoANDyo, b=xoPLUSyo, sel=f, out=andMUXadd);

    // ======================================================
/*
    Xor16(a[0]=no,        
          a[1]=no,
          a[2]=no,
          a[3]=no,
          a[4]=no,
          a[5]=no,
          a[6]=no,
          a[7]=no,
          a[8]=no,
          a[9]=no,
          a[10]=no,
          a[11]=no,
          a[12]=no,
          a[13]=no,
          a[14]=no,
          a[15]=no,
          b=andMUXadd, out=out);
*/
            Xor16(a[0]=no,        
          a[1]=no,
          a[2]=no,
          a[3]=no,
          a[4]=no,
          a[5]=no,
          a[6]=no,
          a[7]=no,
          a[8]=no,
          a[9]=no,
          a[10]=no,
          a[11]=no,
          a[12]=no,
          a[13]=no,
          a[14]=no,
          a[15]=no,
          b=andMUXadd, out=out);
}