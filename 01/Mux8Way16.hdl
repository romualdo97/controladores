CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // PROCESS:
    // Negamos los tres bits de entrada
    Not(in=sel[2], out=Nots2);
    Not(in=sel[1], out=Nots1);
    Not(in=sel[0], out=Nots0);

    // checking for a selection 000
    And4Way16(a=a, b=Nots2, c=Nots1, d=Nots0, out=aValue);

    // checking for b selection 001
    And4Way16(a=b, b=Nots2, c=Nots1, d=sel[0], out=bValue);

    // checking for c selection 010
    And4Way16(a=c, b=Nots2, c=sel[1], d=Nots0, out=cValue);

    // checking for d selection 011
    And4Way16(a=d, b=Nots2, c=sel[1], d=sel[0], out=dValue);

    // checking for e selection 100
    And4Way16(a=e, b=sel[2], c=Nots1, d=Nots0, out=eValue);

    // checking for f selection 101
    And4Way16(a=f, b=sel[2], c=Nots1, d=sel[0], out=fValue);

    // checking for g selection 110
    And4Way16(a=g, b=sel[2], c=sel[1], d=Nots0, out=gValue);

    // checking for h selection 111
    And4Way16(a=h, b=sel[2], c=sel[1], d=sel[0], out=hValue);

    // OUTPUT:
    // Calculamor un Or8Way que recibe como entrada
    // las anteriores computaciones logicas
    Or16(a=aValue, b=bValue, out=aOrb);
    Or16(a=cValue, b=dValue, out=cOrd);
    Or16(a=aOrb, b=cOrd, out=acOrbd);

    Or16(a=eValue, b=fValue, out=eOrf);
    Or16(a=gValue, b=hValue, out=gOrh);
    Or16(a=eOrf, b=gOrh, out=egOrfh);

    Or16(a=acOrbd, b=egOrfh, out=out);
}
/*
    Not(in=sel[2], out=Nots2);
    Not(in=sel[1], out=Nots1);
    Not(in=sel[0], out=Nots0);

    // checking for a selection 000
    And4Way16(a=a, b=Nots2, c=Nots1, d=Nots0, out=aValue);

    // checking for b selection 001
    And4Way16(a=b, b=Nots2, c=Nots1, d=sel[0], out=bValue);

    // checking for c selection 010
    And4Way16(a=c, b=Nots2, c=sel[1], d=Nots0, out=cValue);

    // checking for d selection 011
    And4Way16(a=d, b=Nots2, c=sel[1], d=sel[0], out=dValue);

    // checking for e selection 100
    And4Way16(a=e, b=sel[2], c=Nots1, d=Nots0, out=eValue);

    // checking for f selection 101
    And4Way16(a=f, b=sel[2], c=Nots1, d=sel[0], out=fValue);

    // checking for g selection 110
    And4Way16(a=g, b=sel[2], c=sel[1], d=Nots0, out=gValue);

    // checking for h selection 111
    And4Way16(a=h, b=sel[2], c=sel[1], d=sel[0], out=hValue);

    // output
    Or16(a=aValue, b=bValue, out=aOrb);
    Or16(a=cValue, b=dValue, out=cOrd);
    Or16(a=aOrb, b=cOrd, out=acOrbd);

    Or16(a=eValue, b=fValue, out=eOrf);
    Or16(a=gValue, b=hValue, out=gOrh);
    Or16(a=eOrf, b=gOrh, out=egOrfh);

    Or16(a=acOrbd, b=egOrfh, out=out);
    */