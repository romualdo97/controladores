// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /*
    POSIBLES ERRORES
        Los bits de control de la ALU estan mal puestos
 */

CHIP CPU-S2 {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 0 v v v v  v  v  v  v  v  v  v  v  v  v  v  : TYPE-A
    // i 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3 : TYPE-C
    // i 0 n a n  n  n  n  n  n  n  n  n  n  n  n  : TYPE-S
    // n: significa que no es de importancia
    // v: que puede tomar cualquier valor

    /*
    ██████╗  █████╗ ████████╗ █████╗     ███╗   ███╗███████╗███╗   ███╗ ██████╗ ██████╗ ██╗   ██╗    ██████╗ ███████╗██╗      █████╗ ████████╗███████╗██████╗ 
    ██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗    ████╗ ████║██╔════╝████╗ ████║██╔═══██╗██╔══██╗╚██╗ ██╔╝    ██╔══██╗██╔════╝██║     ██╔══██╗╚══██╔══╝██╔════╝██╔══██╗
    ██║  ██║███████║   ██║   ███████║    ██╔████╔██║█████╗  ██╔████╔██║██║   ██║██████╔╝ ╚████╔╝     ██████╔╝█████╗  ██║     ███████║   ██║   █████╗  ██║  ██║
    ██║  ██║██╔══██║   ██║   ██╔══██║    ██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║   ██║██╔══██╗  ╚██╔╝      ██╔══██╗██╔══╝  ██║     ██╔══██║   ██║   ██╔══╝  ██║  ██║
    ██████╔╝██║  ██║   ██║   ██║  ██║    ██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚██████╔╝██║  ██║   ██║       ██║  ██║███████╗███████╗██║  ██║   ██║   ███████╗██████╔╝
    ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝    ╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝       ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═════╝                                                                                                                                                    
    */

    // is type-A instruction?
    // ==================================================
    Not(in=instruction[15], out=isTypeA);
    // FOR TYPE-A INSTRUCTION
    // CPU should write in A register if this is a type-A instruction
    // if i = 0
    //Not(in=instruction[15], out=no);
    // ==================================================

    // is not type-A instruction?
    // ==================================================
    Not(in=isTypeA, out=isNotTypeA);
    // ==================================================

    // is type-C instruction?
    // ==================================================
    And(a=instruction[15], b=instruction[14], out=isTypeC);
    // ==================================================

    // is not type-C instruction?
    // ==================================================
    Not(in=isTypeC, out=isNotTypeC);
    // ==================================================

    // is type-S instruction?
    // ==================================================
    Not(in=instruction[14], out=so);
    And(a=instruction[15], b=so, out=isTypeS);
    // ==================================================

    // is not type-S instruction?
    // ==================================================
    Not(in=isTypeS, out=isNotTypeS);
    // ==================================================

    // ALU output should write in A register?
    // ==================================================
    // FOR TYPE-C INSTRUCTION
    // CPU should write in A register dest if ALU specefies that
    // and if this is a type-C instruction
    // if (d1 & i)
    And(a=isTypeC, b=instruction[5], out=isDestA);
    // FOR TYPE-S INSTRUCTION
    // should write in A register when 's' bit is zero
    Not(in=instruction[12], out=ns);
    And(a=isTypeS, b=ns, out=isSwapA);
    // FOR TYPE-C,-A INSTRUCTION
    // CPU should write in A register if (d1 & i) | !i
    Or(a=isTypeA, b=isDestA, out=inoralu);
    Or(a=inoralu, b=isSwapA, out=writeA);
    // ==================================================

    // what should be written in A register?
    // ==================================================
    //Or(a=isTypeS, b=isTypeC, out=SorC);
    // should be written ALUo or swaped A?
    Mux16(a=ALUo, b=MorAo, sel=isTypeS, out=sco);
    // should be written sco or instruction?
    Mux16(a=sco, b=instruction, sel=isTypeA, out=inAreg);
    // ==================================================

    // A Register
    // ==================================================
    // FOR TYPE-C,-A INSTRUCTION
    //ARegister(in=inAreg, load=writeA, out=Areg, out[0..14]=addressM);
    ARegister(in=inAreg, load=writeA, out=Areg, out[0..14]=addressM);
    // ==================================================

    // what should be the y input for the ALU?
    // ==================================================
    // FOR TYPE-C INSTRUCTION
    // should ALU compute using Memory[A] or A register?
    And(a=isTypeC, b=instruction[12], out=r);
    Mux16(a=Areg, b=inM, sel=r, out=MorA); // MorA = [M]emory or [A] register
    // ==================================================

    // ALU output should write in D register?
    // ==================================================
    // CPU should write in D register if d2 & i
    And(a=isTypeC, b=instruction[4], out=isDestD);
    Or(a=isTypeS, b=isDestD, out=writeD);
    // ==================================================

    // what should be written in D register?
    // ==================================================
    // should be written ALUo or swaped D?
    Mux16(a=Drego, b=ALUo, sel=isTypeC, out=inDreg);
    // ==================================================

    // D Register
    // ==================================================
    //DRegister(in=inDreg, load=writeD, out=Dreg);
    DRegister(in=inDreg, load=writeD, out=Dreg);
    // ==================================================

    // SWAP UNITY: should swap?
    // ==================================================
    // Swap if needed
    //And(a=isTypeS, b=instruction[12], out=isSwap);
    //Register(in=Dreg, load=true, out=tempDreg);
    //Register(in=MorA, load=true, out=tempMorA);
    //Xor16
    //Mux16(a=false, b=MorA, sel=isTypeS, out=Drego);
    //Mux16(a=false, b=Dreg, sel=isTypeS, out=MorAo);
    Mux16(a=Dreg, b=MorA, sel=isTypeS, out=Drego);
    Mux16(a=MorA, b=Dreg, sel=isTypeS, out=MorAo);
    // ==================================================

    // ALU
    // ==================================================
    ALU(x=Drego, y=MorAo, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUo, zr=zr, ng=ng);
    //ALU(x=Dreg, y=MorA, zx=true, nx=true, zy=true, ny=true, f=true, no=true, out=ALUo, zr=zr, ng=ng);
    //ALU(x=Dreg, y=MorA, zx=instruction[6], nx=instruction[7], zy=instruction[8], ny=instruction[9], f=instruction[10], no=instruction[11], out=ALUo, zr=zr, ng=ng);
    // ==================================================

    // ALU output should write in M[A] register?
    // ==================================================
    // CPU should write in memory if d3 & i
    //And(a=isNotTypeA, b=true, out=writeM);
    And(a=isTypeC, b=instruction[3], out=isDestM);
    And(a=isTypeS, b=instruction[12], out=isSwapM);
    Or(a=isSwapM, b=isDestM, out=writeM);
    // ==================================================

    // what should be written in M[A] register?
    // ==================================================
    Mux16(a=MorA, b=ALUo, sel=isTypeC, out=outM);
    // ==================================================

    /*
    ██╗███╗   ██╗███████╗████████╗██████╗ ██╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗    ███╗   ███╗███████╗███╗   ███╗ ██████╗ ██████╗ ██╗   ██╗    ██████╗ ███████╗██╗      █████╗ ████████╗███████╗██████╗ 
    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║    ████╗ ████║██╔════╝████╗ ████║██╔═══██╗██╔══██╗╚██╗ ██╔╝    ██╔══██╗██╔════╝██║     ██╔══██╗╚══██╔══╝██╔════╝██╔══██╗
    ██║██╔██╗ ██║███████╗   ██║   ██████╔╝██║   ██║██║        ██║   ██║██║   ██║██╔██╗ ██║    ██╔████╔██║█████╗  ██╔████╔██║██║   ██║██████╔╝ ╚████╔╝     ██████╔╝█████╗  ██║     ███████║   ██║   █████╗  ██║  ██║
    ██║██║╚██╗██║╚════██║   ██║   ██╔══██╗██║   ██║██║        ██║   ██║██║   ██║██║╚██╗██║    ██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║   ██║██╔══██╗  ╚██╔╝      ██╔══██╗██╔══╝  ██║     ██╔══██║   ██║   ██╔══╝  ██║  ██║
    ██║██║ ╚████║███████║   ██║   ██║  ██║╚██████╔╝╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║    ██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚██████╔╝██║  ██║   ██║       ██║  ██║███████╗███████╗██║  ██║   ██║   ███████╗██████╔╝
    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝       ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═════╝                                                                                                                                                                                                             
    */

    // negate zr and ng
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    // 0, a) NULL
    // -> false
    // 1, b) JGT | If out > 0 jump
    And(a=nzr, b=nng, out=jgto);
    And(a=jgto, b=instruction[15], out=JGT);
    // 2, c) JEQ | If out = 0 jump
    // -> zr
    And(a=zr, b=instruction[15], out=JEQ);
    // 3, d) JGE | If out >= 0 jump
    // -> nng
    And(a=nng, b=instruction[15], out=JGE);
    // 4, e) JLT | If out < 0 jump
    // -> ng
    And(a=ng, b=instruction[15], out=JLT);
    // 5, f) JNE | If out != 0 jump
    // -> nzr
    And(a=nzr, b=instruction[15], out=JNE);
    // 7, g) JLE | If out <= 0 jump
    And(a=ng, b=instruction[15], out=jleo);
    Or(a=jleo, b=zr, out=JLE);
    //And(a=ng, b=zr, out=jleo);
    //And(a=jleo, b=instruction[15], out=JLE);
    // 8, h) JUMP 
    // -> true
    And(a=true, b=instruction[15], out=JUMP);

    // MUX8WAY

    Xor(a=instruction[0], b=instruction[1], out=xorab);
    Xor(a=xorab, b=instruction[2], out=xoro);

    Mux(a=JGT, b=JEQ, sel=instruction[1], out=muxa);
    Mux(a=JLT, b=JUMP, sel=instruction[0], out=muxb);
    Mux(a=muxb, b=muxa, sel=xorab, out=muxabo);

    Xor(a=instruction[1], b=instruction[2], out=xorcd);

    Mux(a=JGE, b=JNE, sel=instruction[2], out=muxc);
    Mux(a=false, b=JLE, sel=instruction[1], out=muxd);
    Mux(a=muxd, b=muxc, sel=xorcd, out=muxcdo);

    Mux(a=muxcdo, b=muxabo, sel=xoro, out=oo);

    Or(a=instruction[0], b=instruction[1], out=aa);
    Or(a=aa, b=instruction[2], out=aaa);
    And(a=aaa, b=isTypeA, out=isJumpCond);

    Mux(a=false, b=oo, sel=isJumpCond, out=canJUMP);

    PC(in=Areg, load=canJUMP, inc=true, reset=reset, out[0..14]=pc);

}